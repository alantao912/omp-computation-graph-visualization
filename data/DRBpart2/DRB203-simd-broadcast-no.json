{
    "edges": [
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 1,
            "target": 2
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 3
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 4
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 6
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 7
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 5
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 8
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 9
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 10
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 2,
            "target": 19
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 3,
            "target": 13
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 4,
            "target": 15
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 5,
            "target": 12
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 6,
            "target": 14
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 7,
            "target": 18
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 8,
            "target": 16
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 9,
            "target": 17
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 10,
            "target": 11
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 11,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 12,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 13,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 14,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 15,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 16,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 17,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 18,
            "target": 19
        }
    ],
    "files": {
        "/home/fjin/playground/dataracebench/micro-benchmarks/DRB203-simd-broadcast-no.c": "/*\n!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!\n!!! Copyright (c) 17-20, Lawrence Livermore National Security, LLC\n!!! and DataRaceBench project contributors. See the DataRaceBench/COPYRIGHT file for details.\n!!!\n!!! SPDX-License-Identifier: (BSD-3-Clause)\n!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!\n*/\n\n/*\nNo data race present.\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char *argv[]) {\n  int len = 20000;\n  if (argc > 1)\n    len = atoi(argv[1]);\n  double a[len];\n  for (int i = 0; i < len; i++)\n    a[i] = i;\n  double c = 3.14159265358979323846;\n\n#pragma omp parallel for simd schedule(dynamic, 64)\n  for (int i = 0; i < len; i++)\n    a[i] = a[i] + c;\n\n  printf(\"a[0]=%f, a[%i]=%f, a[%i]=%f\\n\", a[0], len / 2, a[len / 2], len - 1,\n         a[len - 1]);\n  return 0;\n}\n"
    },
    "nodes": [
        {
            "active": 1,
            "end_event": 0,
            "has_race": false,
            "hidden": 0,
            "id": 1,
            "ontarget": false,
            "stack": "file: /home/fjin/playground/dataracebench/micro-benchmarks/DRB203-simd-broadcast-no.c, line: 26, col: 1"
        },
        {
            "active": 1,
            "end_event": 1,
            "has_race": false,
            "hidden": 0,
            "id": 2,
            "ontarget": false,
            "stack": "file: /home/fjin/playground/dataracebench/micro-benchmarks/DRB203-simd-broadcast-no.c, line: 26, col: 1"
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 3,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 4,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 5,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 6,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 7,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 8,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 9,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 10,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 11,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 12,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 13,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 14,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 15,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 16,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 17,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 18,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 2,
            "has_race": false,
            "hidden": 0,
            "id": 19,
            "ontarget": false,
            "stack": ""
        }
    ],
    "races": null,
    "targets": null
}