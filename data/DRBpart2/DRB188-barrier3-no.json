{
    "edges": [
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 1,
            "target": 2
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 3
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 4
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 2,
            "target": 11
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 3,
            "target": 6
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 4,
            "target": 5
        },
        {
            "edge_type": 5,
            "hidden": 0,
            "source": 5,
            "target": 6
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 5,
            "target": 7
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 6,
            "target": 8
        },
        {
            "edge_type": 5,
            "hidden": 0,
            "source": 7,
            "target": 8
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 7,
            "target": 9
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 8,
            "target": 10
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 9,
            "target": 11
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 10,
            "target": 11
        }
    ],
    "files": {
        "/home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c": "/*\n!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!\n!!! Copyright (c) 2017-20, Lawrence Livermore National Security, LLC\n!!! and DataRaceBench project contributors. See the DataRaceBench/COPYRIGHT file for details.\n!!!\n!!! SPDX-License-Identifier: (BSD-3-Clause)\n!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!\n */\n\n/*\n * This is a program based on a dataset contributed by \n * Wenhao Wu and Stephen F. Siegel @Univ. of Delaware.\n \n * implements 2-thread reuseable barrier using 3 locks, no race.\n */\n\n#include <stdio.h>\n#include <omp.h>\n#include <assert.h>\n\nomp_lock_t l0, l1, l2;\nconst int n = 100;\nint x = 1;\n\nvoid barrier_init()\n{\n  omp_init_lock(&l0);\n  omp_init_lock(&l1);\n  omp_init_lock(&l2);\n}\n\nvoid barrier_destroy()\n{\n  omp_destroy_lock(&l0);\n  omp_destroy_lock(&l1);\n  omp_destroy_lock(&l2);\n}\n\nvoid barrier_start(int tid)\n{\n  if (tid == 0)\n  {\n    omp_set_lock(&l0);\n    omp_set_lock(&l2);\n  }\n  else if (tid == 1)\n  {\n    omp_set_lock(&l1);\n  }\n}\n\nvoid barrier_stop(int tid)\n{\n  if (tid == 0)\n  {\n    omp_unset_lock(&l0);\n    omp_unset_lock(&l2);\n  }\n  else if (tid == 1)\n  {\n    omp_unset_lock(&l1);\n  }\n}\n\nvoid barrier_wait(int tid)\n{\n  if (tid == 0)\n  {\n    omp_unset_lock(&l0);\n    omp_set_lock(&l1);\n    omp_unset_lock(&l2);\n    omp_set_lock(&l0);\n    omp_unset_lock(&l1);\n    omp_set_lock(&l2);\n  }\n  else if (tid == 1)\n  {\n    omp_set_lock(&l0);\n    omp_unset_lock(&l1);\n    omp_set_lock(&l2);\n    omp_unset_lock(&l0);\n    omp_set_lock(&l1);\n    omp_unset_lock(&l2);\n  }\n}\n\nint main()\n{\n  barrier_init();\n#pragma omp parallel num_threads(2)\n  {\n    int tid = omp_get_thread_num();\n    barrier_start(tid);\n#pragma omp barrier\n    for (int i = 0; i < n; i++)\n    {\n      printf(\"Thread %d: phase 1, i=%d, x=%d\\n\", tid, i, x);\n      fflush(stdout);\n      assert(x == 1);\n      barrier_wait(tid);\n      if (tid == 0)\n        x = 0;\n      barrier_wait(tid);\n      printf(\"Thread %d: phase 3, i=%d, x=%d\\n\", tid, i, x);\n      fflush(stdout);\n      assert(x == 0);\n      barrier_wait(tid);\n      if (tid == 1)\n        x = 1;\n      barrier_wait(tid);\n    }\n#pragma omp barrier\n    barrier_stop(tid);\n  } // end of parallel construct\n  barrier_destroy();\n  printf(\"Done: x=%d\\n\", x);\n}\n"
    },
    "nodes": [
        {
            "active": 1,
            "end_event": 0,
            "has_race": false,
            "hidden": 0,
            "id": 1,
            "ontarget": false,
            "stack": "file: /home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c, line: 90, col: 1"
        },
        {
            "active": 1,
            "end_event": 1,
            "has_race": false,
            "hidden": 0,
            "id": 2,
            "ontarget": false,
            "stack": "file: /home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c, line: 90, col: 1"
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 3,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 4,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": true,
            "hidden": 0,
            "id": 5,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": true,
            "hidden": 0,
            "id": 6,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 7,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 8,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 9,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 10,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 2,
            "has_race": false,
            "hidden": 0,
            "id": 11,
            "ontarget": false,
            "stack": ""
        }
    ],
    "races": [
        {
            "current": 6,
            "current_stack": "    #0 .omp_outlined._debug__ /home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c:106:7 (DRB188-barrier3-no+0xd1d2e)",
            "lca": 0,
            "prev": 5,
            "prev_stack": "    #0 .omp_outlined._debug__ /home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c:102:11 (DRB188-barrier3-no+0xd1cc3)"
        },
        {
            "current": 5,
            "current_stack": "    #0 .omp_outlined._debug__ /home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c:99:7 (DRB188-barrier3-no+0xd1c74)",
            "lca": 0,
            "prev": 6,
            "prev_stack": "    #0 .omp_outlined._debug__ /home/fjin/playground/dataracebench/micro-benchmarks/DRB188-barrier3-no.c:109:11 (DRB188-barrier3-no+0xd1d7d)"
        }
    ],
    "targets": null
}