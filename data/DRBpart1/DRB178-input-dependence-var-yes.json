{
    "edges": [
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 1,
            "target": 2
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 3
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 4
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 5
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 6
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 8
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 7
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 9
        },
        {
            "edge_type": 1,
            "hidden": 0,
            "source": 1,
            "target": 10
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 2,
            "target": 19
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 3,
            "target": 17
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 4,
            "target": 18
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 5,
            "target": 12
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 6,
            "target": 14
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 7,
            "target": 15
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 8,
            "target": 16
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 9,
            "target": 13
        },
        {
            "edge_type": 0,
            "hidden": 0,
            "source": 10,
            "target": 11
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 11,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 12,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 13,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 14,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 15,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 16,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 17,
            "target": 19
        },
        {
            "edge_type": 3,
            "hidden": 0,
            "source": 18,
            "target": 19
        }
    ],
    "files": {
        "/home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB178-input-dependence-var-yes.c": "/*\n!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!\n!!! Copyright (c) 2017-20, Lawrence Livermore National Security, LLC\n!!! and DataRaceBench project contributors. See the DataRaceBench/COPYRIGHT file\nfor details.\n!!!\n!!! SPDX-License-Identifier: (BSD-3-Clause)\n!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!!\n */\n\n/* \n * Input dependence race: example from OMPRacer: A Scalable and Precise Static Race\n   Detector for OpenMP Programs\n * Data Race Pair, A[0]@45:7:W vs. A[i]@42:5:W\n * */\n\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid load_from_input(int *data, int size)\n{\n  for(int i = 0; i < size; i++) {\n    data[i] = size-i;\n  } \n}\n\n\nint main(int argc, char *argv[]) {\n\n  int *A; \n  int N = 100;\n\n  if (argc>1)\n    N = atoi(argv[1]);\n\n  A = (int*) malloc(sizeof(int) * N);\n\n  load_from_input(A, N);\n  \n#pragma omp parallel for shared(A)\n  for(int i = 0; i < N; i++) {\n    A[i] = i;\n    if (N > 10000) \n    { \n      A[0] = 1; \n    }\n  }\n\n  free(A);\n  return 0;\n}\n"
    },
    "nodes": [
        {
            "active": 1,
            "end_event": 0,
            "has_race": false,
            "hidden": 0,
            "id": 1,
            "ontarget": false,
            "stack": "file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB178-input-dependence-var-yes.c, line: 40, col: 1"
        },
        {
            "active": 1,
            "end_event": 1,
            "has_race": false,
            "hidden": 0,
            "id": 2,
            "ontarget": false,
            "stack": "file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB178-input-dependence-var-yes.c, line: 40, col: 1"
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 3,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 4,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 5,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 6,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 7,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 8,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 9,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 3,
            "has_race": false,
            "hidden": 0,
            "id": 10,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 11,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 12,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 13,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 14,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 15,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 16,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 17,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 4,
            "has_race": false,
            "hidden": 0,
            "id": 18,
            "ontarget": false,
            "stack": ""
        },
        {
            "active": 1,
            "end_event": 2,
            "has_race": false,
            "hidden": 0,
            "id": 19,
            "ontarget": false,
            "stack": ""
        }
    ],
    "races": null,
    "targets": null
}